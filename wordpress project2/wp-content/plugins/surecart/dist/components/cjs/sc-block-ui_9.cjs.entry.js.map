{"file":"sc-block-ui.sc-form.sc-form-control.sc-format-number.sc-radio.sc-radio-group.sc-shipping-choices.sc-spinner.sc-visually-hidden.entry.cjs.js","mappings":"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","names":["h","maybeConvertAmount","FormSubmitController","isRtl"],"sources":["./src/components/ui/block-ui/sc-block-ui.scss?tag=sc-block-ui&encapsulation=shadow","./src/components/ui/block-ui/sc-block-ui.tsx","./src/functions/form.ts","./src/components/ui/form/sc-form.scss?tag=sc-form&encapsulation=shadow","./src/components/ui/form/sc-form.tsx","./src/components/ui/form-control/sc-form-control.scss?tag=sc-form-control&encapsulation=shadow","./src/components/ui/form-control/sc-form-control.tsx","./src/components/util/format-number/sc-format-number.tsx","./src/components/ui/radio/sc-radio.scss?tag=sc-radio&encapsulation=shadow","./src/components/ui/radio/sc-radio.tsx","./src/components/ui/radio-group/sc-radio-group.scss?tag=sc-radio-group&encapsulation=shadow","./src/components/ui/radio-group/sc-radio-group.tsx","./src/components/ui/sc-shipping-choices/sc-shipping-choices.scss?tag=sc-shipping-choices&encapsulation=shadow","./src/components/ui/sc-shipping-choices/sc-shipping-choices.tsx","./src/components/ui/spinner/sc-spinner.scss?tag=sc-spinner&encapsulation=shadow","./src/components/ui/spinner/sc-spinner.tsx","./src/components/util/visually-hidden/sc-visually-hidden.css?tag=sc-visually-hidden&encapsulation=shadow","./src/components/util/visually-hidden/sc-visually-hidden.tsx"],"sourcesContent":[":host {\n  display: block;\n  position: absolute;\n  top: -5px;\n  left: -5px;\n  right: -5px;\n  bottom: -5px;\n  overflow:hidden;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  > * {\n    z-index: 1;\n  }\n\n  &:after {\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    cursor: wait;\n    background: var(--sc-block-ui-background-color, var(--sc-color-white));\n    opacity: var(--sc-block-ui-opacity, 0.15);\n  }\n\n  &.transparent:after {\n    background: transparent;\n  }\n}\n\n.overlay__content {\n  font-size: var(--sc-font-size-large);\n  font-weight: var(--sc-font-weight-semibold);\n  display: grid;\n  gap: 0.5em;\n  text-align: center;\n}\n","import { Component, h, Prop } from '@stencil/core';\n\n/**\n * @part base - The elements base wrapper.\n * @part content - The content (spinner)\n */\n@Component({\n  tag: 'sc-block-ui',\n  styleUrl: 'sc-block-ui.scss',\n  shadow: true,\n})\nexport class ScBlockUi {\n  @Prop() zIndex: number = 1;\n  @Prop() transparent: boolean;\n  @Prop() spinner: boolean;\n  render() {\n    return (\n      <div part=\"base\" class={{ overlay: true, transparent: this.transparent }} style={{ 'z-index': this.zIndex.toString() }}>\n        <div class=\"overlay__content\" part=\"content\">\n          <slot name=\"spinner\">{!this.transparent && this.spinner && <sc-spinner></sc-spinner>}</slot>\n          <slot></slot>\n        </div>\n      </div>\n    );\n  }\n}\n","/**\n * Serializes a form and returns a plain object. If a form control with the same name appears more than once, the\n * property will be converted to an array.\n */\nexport function serialize(form: HTMLFormElement) {\n  const formData = new FormData(form);\n  const object: Record<string, unknown> = {};\n\n  formData.forEach((value, key) => {\n    object[key] = value;\n  });\n\n  return object;\n}\n","sc-form {\n  display: block;\n}\n:host {\n  display: block;\n}\n\n::slotted(*:not(:last-child)),\nsc-form form > *:not(:last-child) {\n  margin-bottom: var(--sc-form-row-spacing, 0.75em);\n\n  &.wp-block-spacer {\n    margin-bottom: 0;\n  }\n}\n\n// sc-form .wp-block-columns .wp-block-column {\n//   margin: 50px;\n// }\n","import { Component, Element, Event, EventEmitter, h, Listen, Method, Prop } from '@stencil/core';\n\nimport { serialize } from '../../../functions/form';\n\n@Component({\n  tag: 'sc-form',\n  styleUrl: 'sc-form.scss',\n  shadow: true,\n})\nexport class ScForm {\n  @Element() form: HTMLElement;\n  private formElement: HTMLFormElement;\n\n  /** Prevent the form from validating inputs before submitting. */\n  @Prop({ reflect: true, mutable: true }) novalidate: boolean = false;\n\n  /**\n   * Emitted when the form is submitted. This event will not be emitted if any form control inside of\n   * it is in an invalid state, unless the form has the `novalidate` attribute. Note that there is never a need to prevent\n   * this event, since it doen't send a GET or POST request like native forms. To \"prevent\" submission, use a conditional\n   * around the XHR request you use to submit the form's data with.\n   */\n  @Event({ bubbles: true }) scSubmit: EventEmitter<void>;\n\n  /**\n   * Backwards compat.\n   */\n  @Event() scFormSubmit: EventEmitter<void>;\n\n  /**\n   * Emitted when the form is submitted. This event will not be emitted if any form control inside of\n   * it is in an invalid state, unless the form has the `novalidate` attribute. Note that there is never a need to prevent\n   * this event, since it doen't send a GET or POST request like native forms. To \"prevent\" submission, use a conditional\n   * around the XHR request you use to submit the form's data with.\n   */\n  @Event() scFormChange: EventEmitter<Object>;\n\n  /** Serializes all form controls elements and returns a `FormData` object. */\n  @Method('getFormData')\n  async getFormData() {\n    return new FormData(this.formElement);\n  }\n\n  @Method('getFormJson')\n  async getFormJson() {\n    return serialize(this.formElement);\n  }\n\n  @Listen('scChange')\n  async handleChange() {\n    this.scFormChange.emit(serialize(this.formElement));\n  }\n\n  @Method('submit')\n  async submit() {\n    return this.submitForm();\n  }\n\n  /** Gets all form control elements (native and custom). */\n  getFormControls() {\n    return [...this.form.querySelectorAll('*')] as HTMLElement[];\n  }\n\n  @Method('validate')\n  async validate() {\n    const formControls = this.getFormControls();\n    const formControlsThatReport = formControls.filter((el: any) => typeof el.reportValidity === 'function') as any;\n\n    if (!this.novalidate) {\n      for (const el of formControlsThatReport) {\n        // element is hidden, don't client-side validate.\n        if (!(el.offsetWidth || el.offsetHeight || el.getClientRects().length)) {\n          continue;\n        }\n\n        const isValid = await el.reportValidity();\n\n        if (!isValid) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  submitForm() {\n    // Calling form.submit() seems to bypass the submit event and constraint validation. Instead, we can inject a\n    // native submit button into the form, click it, then remove it to simulate a standard form submission.\n    const button = document.createElement('button');\n    if (this.formElement) {\n      button.type = 'submit';\n      button.style.position = 'absolute';\n      button.style.width = '0';\n      button.style.height = '0';\n      button.style.clip = 'rect(0 0 0 0)';\n      button.style.clipPath = 'inset(50%)';\n      button.style.overflow = 'hidden';\n      button.style.whiteSpace = 'nowrap';\n      this.formElement.append(button);\n      button.click();\n      button.remove();\n    }\n  }\n\n  render() {\n    return (\n      <div part=\"base\" class=\"form\" role=\"form\">\n        <form\n          part=\"form\"\n          ref={el => (this.formElement = el as HTMLFormElement)}\n          class=\"test\"\n          onSubmit={async e => {\n            e.preventDefault();\n            const isValid = await this.validate();\n            if (!isValid) {\n              return false;\n            }\n            this.scSubmit.emit();\n            this.scFormSubmit.emit();\n          }}\n          novalidate={this.novalidate}\n        >\n          <slot />\n        </form>\n      </div>\n    );\n  }\n}\n",".form-control {\n  font-family: var(--sc-font-sans);\n  font-size: var(--sc-font-size-medium);\n  font-weight: var(--sc-font-weight-normal);\n  display: flex;\n  flex-direction: column;\n  gap: var(--sc-input-label-margin);\n\n  .form-control__label {\n    display: none;\n  }\n\n  .form-control__help-text {\n    display: none;\n  }\n}\n\n// Label\n.form-control--has-label {\n  .form-control__label {\n    display: inline-block;\n    color: var(--sc-input-label-color);\n    font-weight: var(--sc-input-label-font-weight);\n    text-transform: var(--sc-input-label-text-transform, none);\n    letter-spacing: var(--sc-input-label-letter-spacing, 0);\n  }\n\n  &.form-control--small .form-control__label {\n    font-size: var(--sc-input-label-font-size-small);\n  }\n\n  &.form-control--medium .form-control__label {\n    font-size: var(--sc-input-label-font-size-medium);\n  }\n\n  &.form-control--large .form-control_label {\n    font-size: var(--sc-input-label-font-size-large);\n  }\n}\n\n::slotted(.control--errors) {\n  margin-top: var(--sc-spacing-small);\n  color: var(--sc-color-danger-500);\n}\n::slotted([slot='label-end']) {\n  float: right;\n}\n\n.form-control--is-required .required {\n  color: var(--sc-color-danger-500);\n}\n\n// Help text\n.form-control--has-help-text {\n  .form-control__help-text {\n    display: block;\n    color: var(--sc-input-help-text-color);\n  }\n\n  &.form-control--small .form-control__help-text {\n    font-size: var(--sc-input-help-text-font-size-small);\n  }\n\n  &.form-control--medium .form-control__help-text {\n    font-size: var(--sc-input-help-text-font-size-medium);\n  }\n\n  &.form-control--large .form-control__help-text {\n    font-size: var(--sc-input-help-text-font-size-large);\n  }\n}\n\n// Error messages\n.form-control--has-error {\n  .form-control__error-text {\n    display: block;\n    color: var(--sc-input-error-text-color);\n  }\n\n  &.form-control--small .form-control__error-text {\n    font-size: var(--sc-input-error-text-font-size-small);\n  }\n\n  &.form-control--medium .form-control__error-text {\n    font-size: var(--sc-input-error-text-font-size-medium);\n  }\n\n  &.form-control--large .form-control__error-text {\n    font-size: var(--sc-input-error-text-font-size-large);\n  }\n\n  ::part(base) {\n    border-color: rgb(var(--sl-color-danger-500));\n  }\n}\n\n.form-control--is-rtl {\n  &.form-control--has-label {\n    .form-control__label {\n      text-align: right;\n    }\n  }\n}\n","import { Component, h, Prop, Element } from '@stencil/core';\nimport { isRtl } from '../../../functions/page-align';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * @part form-control - The elements base wrapper.\n * @part label - The label.\n * @part input - The input wrapper.\n * @part help-text - Help text.\n * @part tooltip - Tooltip\n * @part tooltip-text - Tooltip text.\n */\n@Component({\n  tag: 'sc-form-control',\n  styleUrl: 'sc-form-control.scss',\n  shadow: true,\n})\nexport class ScFormControl {\n  @Element() el: HTMLScFormControlElement;\n\n  /** Size of the label */\n  @Prop({ reflect: true }) size: 'small' | 'medium' | 'large' = 'medium';\n\n  /** Name for the input. Used for validation errors. */\n  @Prop() name: string;\n\n  /** Show the label. */\n  @Prop() showLabel: boolean = true;\n\n  /** Input label. */\n  @Prop() label: string;\n\n  /** Input label id. */\n  @Prop() labelId: string;\n\n  /** Input id. */\n  @Prop() inputId: string;\n\n  /** Whether the input is required. */\n  @Prop() required: boolean = false;\n\n  /** Help text */\n  @Prop() help: string;\n\n  /** Help id */\n  @Prop() helpId: string;\n\n  render() {\n    return (\n      <div\n        part=\"form-control\"\n        class={{\n          'form-control': true,\n          'form-control--small': this.size === 'small',\n          'form-control--medium': this.size === 'medium',\n          'form-control--large': this.size === 'large',\n          'form-control--has-label': !!this.label && this.showLabel,\n          'form-control--has-help-text': !!this.help,\n          'form-control--is-required': !!this.required,\n          'form-control--is-rtl': isRtl(),\n        }}\n      >\n        <label part=\"label\" id={this.labelId} class=\"form-control__label\" htmlFor={this.inputId} aria-hidden={!!this.label ? 'false' : 'true'}>\n          <slot name=\"label\">{this.label}</slot>\n          <slot name=\"label-end\"></slot>\n          {!!this.required && (\n            <span aria-hidden=\"true\" class=\"required\">\n              {' '}\n              *\n            </span>\n          )}\n          <sc-visually-hidden>{!!this.required ? __('required', 'surecart') : ''}</sc-visually-hidden>\n        </label>\n        <div part=\"input\" class=\"form-control__input\">\n          <slot />\n        </div>\n        {this.help && (\n          <div part=\"help-text\" id={this.helpId} class=\"form-control__help-text\">\n            <slot name=\"help-text\">{this.help}</slot>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import { Component, Prop } from '@stencil/core';\nimport { maybeConvertAmount } from '../../../functions/currency';\n\n//TODO: Remove this when unit types are supported\ninterface NumberFormatOptionsWithUnit extends Intl.NumberFormatOptions {\n  unit: string;\n  unitDisplay: 'long' | 'short' | 'narrow';\n}\n\nconst UNIT_TYPES = {\n  kg: 'kilogram',\n  lb: 'pound',\n  g: 'gram',\n  oz: 'ounce',\n};\n\n@Component({\n  tag: 'sc-format-number',\n  shadow: false,\n})\nexport class ScFormatNumber {\n  /** The number to format. */\n  @Prop() value: number = 0;\n\n  /** The locale to use when formatting the number. */\n  @Prop({ mutable: true }) locale: string;\n\n  /** The formatting style to use. */\n  @Prop() type: 'currency' | 'decimal' | 'percent' | 'unit' = 'decimal';\n\n  /** Turns off grouping separators. */\n  @Prop({ attribute: 'no-grouping' }) noGrouping: boolean = false;\n\n  /** The currency to use when formatting. Must be an ISO 4217 currency code such as `USD` or `EUR`. */\n  @Prop() currency = 'USD';\n\n  /** How to display the currency. */\n  @Prop() currencyDisplay: 'symbol' | 'narrowSymbol' | 'code' | 'name' = 'symbol';\n\n  /** The minimum number of integer digits to use. Possible values are 1 - 21. */\n  @Prop() minimumIntegerDigits: number;\n\n  /** The minimum number of fraction digits to use. Possible values are 0 - 20. */\n  @Prop() minimumFractionDigits: number = null;\n\n  /** The maximum number of fraction digits to use. Possible values are 0 - 20. */\n  @Prop() maximumFractionDigits: number;\n\n  /** The minimum number of significant digits to use. Possible values are 1 - 21. */\n  @Prop() minimumSignificantDigits: number;\n\n  /** The maximum number of significant digits to use,. Possible values are 1 - 21. */\n  @Prop() maximumSignificantDigits: number;\n\n  /** Should we convert */\n  @Prop() noConvert: boolean;\n\n  /** The unit to use when formatting.  */\n  @Prop() unit: string = 'lb';\n\n  render() {\n    if (isNaN(this.value)) {\n      return '';\n    }\n    const lang = navigator.language || (navigator as any)?.browserLanguage || (navigator.languages || ['en'])[0];\n\n    // maybe convert zero decimal currencies.\n    const value = this.noConvert || this.type !== 'currency' ? this.value : maybeConvertAmount(this.value, this.currency.toUpperCase());\n\n    // decide how many decimal places to use.\n    const minimumFractionDigits = value % 1 == 0 ? 0 : 2;\n\n    return new Intl.NumberFormat(this.locale || lang, {\n      style: this.type,\n      currency: this.currency.toUpperCase(),\n      currencyDisplay: this.currencyDisplay,\n      useGrouping: !this.noGrouping,\n      minimumIntegerDigits: this.minimumIntegerDigits,\n      minimumFractionDigits: this.minimumFractionDigits !== null ? this.minimumFractionDigits : minimumFractionDigits,\n      maximumFractionDigits: this.maximumFractionDigits,\n      minimumSignificantDigits: this.minimumSignificantDigits,\n      maximumSignificantDigits: this.maximumSignificantDigits,\n      unit: UNIT_TYPES[this.unit],\n    } as NumberFormatOptionsWithUnit).format(value);\n  }\n}\n",":host {\n  display: inline-block;\n}\n\n.radio {\n  display: inline-flex;\n  align-items: flex-start;\n  font-family: var(--sc-input-font-family);\n  font-size: var(--sc-input-font-size-medium);\n  font-weight: var(--sc-input-font-weight);\n  color: var(--sc-input-color);\n  vertical-align: middle;\n  gap: var(--sc-spacing-xx-small);\n}\n\n.radio:not(.radio--editing) {\n  cursor: pointer;\n}\n\n.radio__icon {\n  display: inline-flex;\n  width: var(--sc-radio-size);\n  height: var(--sc-radio-size);\n\n  svg {\n    width: 100%;\n    height: 100%;\n  }\n}\n\n.radio__control {\n  flex: 0 0 auto;\n  position: relative;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n  width: var(--sc-radio-size);\n  height: var(--sc-radio-size);\n  border: solid var(--sc-input-border-width) var(--sc-input-border-color);\n  border-radius: 50%;\n  background-color: var(--sc-input-background-color);\n  color: transparent;\n  transition: var(--sc-input-transition, var(--sc-transition-medium)) border-color, var(--sc-input-transition, var(--sc-transition-medium)) opacity,\n    var(--sc-input-transition, var(--sc-transition-medium)) background-color, var(--sc-input-transition, var(--sc-transition-medium)) color,\n    var(--sc-input-transition, var(--sc-transition-medium)) box-shadow;\n\n  input[type='radio'] {\n    position: absolute;\n    opacity: 0;\n    padding: 0;\n    margin: 0;\n    pointer-events: none;\n  }\n}\n\n// Hover\n.radio:not(.radio--checked):not(.radio--disabled) .radio__control:hover {\n  border-color: var(--sc-input-border-color-hover);\n  background-color: var(--sc-input-background-color-hover);\n}\n\n// Focus\n.radio.radio--focused:not(.radio--checked):not(.radio--disabled) .radio__control {\n  border-color: var(--sc-input-border-color-focus);\n  background-color: var(--sc-input-background-color-focus);\n  box-shadow: 0 0 0 var(--sc-focus-ring-width) var(--sc-focus-ring-color-primary);\n}\n\n// Checked\n.radio--checked .radio__control {\n  color: var(--var-sc-checked-radio-background-color, var(--sc-input-background-color));\n  border-color: var(--sc-color-primary-500);\n  background-color: var(--sc-color-primary-500);\n}\n\n// Checked + hover\n.radio.radio--checked:not(.radio--disabled) .radio__control:hover {\n  opacity: 0.8;\n}\n\n// Checked + focus\n.radio.radio--checked:not(.radio--disabled).radio--focused .radio__control {\n  border-color: var(--var-sc-checked-radio-border-color, var(--sc-input-background-color));\n  background-color: var(--sc-color-primary-500);\n  box-shadow: 0 0 0 var(--sc-focus-ring-width) var(--sc-focus-ring-color-primary);\n}\n\n// Disabled\n.radio--disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n// When the control isn't checked, hide the circle for Windows High Contrast mode a11y\n.radio:not(.radio--checked) svg circle {\n  opacity: 0;\n}\n\n.radio__label {\n  line-height: var(--sc-radio-size);\n  margin-left: 0.5em;\n  user-select: none;\n}\n","import { Component, Prop, h, Event, EventEmitter, Method, State, Element, Watch } from '@stencil/core';\nimport { FormSubmitController } from '../../../functions/form-data';\n\nlet id = 0;\n\n/**\n * @part base - The elements base wrapper.\n * @part control - The control wrapper.\n * @part checked-icon - Checked icon.\n * @part label - The label.\n */\n@Component({\n  tag: 'sc-radio',\n  styleUrl: 'sc-radio.scss',\n  shadow: true,\n})\nexport class ScRadio {\n  @Element() el: HTMLScRadioElement;\n  private input: HTMLInputElement;\n  private formController: any;\n  private inputId: string = `radio-${++id}`;\n  private labelId: string = `radio-label-${id}`;\n\n  /** Does the radio have focus */\n  @State() hasFocus: boolean = false;\n\n  /** The radios name attribute */\n  @Prop() name: string;\n\n  /** The radios value */\n  @Prop() value: string;\n\n  /** Is the radio disabled */\n  @Prop({ reflect: true, mutable: true }) disabled: boolean = false;\n\n  /** Draws the radio in a checked state. */\n  @Prop({ reflect: true, mutable: true }) checked: boolean = false;\n\n  /** Is this required */\n  @Prop({ reflect: true }) required: boolean = false;\n\n  /** This will be true when the control is in an invalid state. Validity is determined by the `required` prop. */\n  @Prop({ reflect: true, mutable: true }) invalid: boolean = false;\n\n  /** This will be true as a workaround in the block editor to focus on the content. */\n  @Prop() edit: boolean;\n\n  /** Emitted when the control loses focus. */\n  @Event() scBlur: EventEmitter<void>;\n\n  /** Emitted when the control's checked state changes. */\n  @Event() scChange: EventEmitter<void>;\n\n  /** Emitted when the control gains focus. */\n  @Event() scFocus: EventEmitter<void>;\n\n  /** Simulates a click on the radio. */\n  @Method()\n  async ceClick() {\n    this.input.click();\n  }\n\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  @Method()\n  async reportValidity() {\n    this.invalid = !this.input.checkValidity();\n    return this.input.reportValidity();\n  }\n\n  @Watch('checked')\n  handleCheckedChange() {\n    if (!this.input) return;\n    if (this.checked) {\n      this.getSiblingRadios().map(radio => (radio.checked = false));\n    }\n    this.input.checked = this.checked;\n    this.scChange.emit();\n  }\n\n  handleClick() {\n    this.checked = true;\n  }\n\n  handleBlur() {\n    this.hasFocus = false;\n    this.scBlur.emit();\n  }\n\n  handleFocus() {\n    this.hasFocus = true;\n    this.scFocus.emit();\n  }\n\n  /** Sets a custom validation message. If `message` is not empty, the field will be considered invalid. */\n  setCustomValidity(message: string) {\n    this.input.setCustomValidity(message);\n    this.invalid = !this.input.checkValidity();\n  }\n\n  getAllRadios() {\n    const radioGroup = this.el.closest('sc-radio-group');\n    // Radios must be part of a radio group\n    if (!radioGroup) {\n      return [];\n    }\n    return [...radioGroup.querySelectorAll('sc-radio')] as HTMLScRadioElement[];\n  }\n\n  getSiblingRadios() {\n    return this.getAllRadios().filter(radio => radio !== this.el) as HTMLScRadioElement[];\n  }\n\n  handleKeyDown(event: KeyboardEvent) {\n    if (this.edit) return true;\n\n    if (['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(event.key)) {\n      const radios = this.getAllRadios().filter(radio => !radio.disabled);\n      const incr = ['ArrowUp', 'ArrowLeft'].includes(event.key) ? -1 : 1;\n      let index = radios.indexOf(this.el) + incr;\n      if (index < 0) index = radios.length - 1;\n      if (index > radios.length - 1) index = 0;\n\n      this.getAllRadios().map(radio => (radio.checked = false));\n      radios[index].focus();\n      radios[index].checked = true;\n\n      event.preventDefault();\n    }\n  }\n\n  // Prevent clicks on the label from briefly blurring the input\n  handleMouseDown(event: MouseEvent) {\n    if (this.edit) return true;\n    event.preventDefault();\n    this.input.focus();\n  }\n\n  componentDidLoad() {\n    this.formController = new FormSubmitController(this.el, {\n      value: (control: HTMLScChoiceElement) => (control.checked ? control.value : undefined),\n    }).addFormData();\n  }\n\n  disconnectedCallback() {\n    this.formController?.removeFormData();\n  }\n\n  render() {\n    const Tag = this.edit ? 'div' : 'label';\n    return (\n      <Tag\n        part=\"base\"\n        class={{\n          'radio': true,\n          'radio--checked': this.checked,\n          'radio--disabled': this.disabled,\n          'radio--focused': this.hasFocus,\n          'radio--editing': this.edit,\n        }}\n        htmlFor={this.inputId}\n        onKeyDown={e => this.handleKeyDown(e)}\n        onMouseDown={e => this.handleMouseDown(e)}\n      >\n        <span part=\"control\" class=\"radio__control\">\n          <span part=\"checked-icon\" class=\"radio__icon\">\n            <svg viewBox=\"0 0 16 16\">\n              <g stroke=\"none\" stroke-width=\"1\" fill=\"none\" fill-rule=\"evenodd\">\n                <g fill=\"currentColor\">\n                  <circle cx=\"8\" cy=\"8\" r=\"3.42857143\"></circle>\n                </g>\n              </g>\n            </svg>\n          </span>\n          <input\n            id={this.inputId}\n            ref={el => (this.input = el as HTMLInputElement)}\n            type=\"radio\"\n            name={this.name}\n            value={this.value}\n            checked={this.checked}\n            disabled={this.disabled}\n            required={this.required}\n            aria-checked={this.checked ? 'true' : 'false'}\n            aria-disabled={this.disabled ? 'true' : 'false'}\n            aria-labelledby={this.labelId}\n            onClick={() => this.handleClick()}\n            onBlur={() => this.handleBlur()}\n            onFocus={() => this.handleFocus()}\n          />\n        </span>\n        <span part=\"label\" id={this.labelId} class=\"radio__label\">\n          <slot></slot>\n        </span>\n      </Tag>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n\n.radio-group {\n  border: none;\n  padding: 0;\n  margin: 0;\n  min-width: 0;\n\n  .radio-group__label {\n    display: inline-block;\n    padding: 0;\n    color: var(--sc-input-label-color);\n    font-weight: var(--sc-input-label-font-weight);\n    text-transform: var(--sc-input-label-text-transform, none);\n    letter-spacing: var(--sc-input-label-letter-spacing, 0);\n    margin-bottom: var(--sc-input-label-margin);\n  }\n\n  &__hidden-input {\n    position: absolute;\n    opacity: 0;\n    padding: 0px;\n    margin: 0px;\n    pointer-events: none;\n  }\n\n  &--is-required .radio-group__label:after {\n    content: ' *';\n    color: var(--sc-color-danger-500);\n  }\n}\n\n::slotted(sc-radio:not(:last-of-type)) {\n  display: block;\n  margin-bottom: var(--sc-spacing-x-small);\n}\n\n// .radio-group:not(.radio-group--has-fieldset) {\n//   border: none;\n//   padding: 0;\n//   margin: 0;\n//   min-width: 0;\n// }\n// .radio-group:not(.radio-group--has-fieldset) .radio-group__label {\n//   position: absolute;\n//   width: 0;\n//   height: 0;\n//   clip: rect(0 0 0 0);\n//   clip-path: inset(50%);\n//   overflow: hidden;\n//   white-space: nowrap;\n// }\n\n.radio-group--is-rtl {\n  &.radio-group {\n    &,\n    .radio-group__label {\n      text-align: right;\n    }\n  }\n}\n","import { Component, Prop, h, Method, Listen, Event, EventEmitter } from '@stencil/core';\nimport { isRtl } from '../../../functions/page-align';\n\n@Component({\n  tag: 'sc-radio-group',\n  styleUrl: 'sc-radio-group.scss',\n  shadow: true,\n})\nexport class ScRadioGroup {\n  /** The input for validation */\n  private input: HTMLInputElement;\n\n  /** The radio group label. Required for proper accessibility. */\n  @Prop() label = '';\n\n  /**\n   * This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n   * `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.\n   */\n  @Prop({ reflect: true, mutable: true }) invalid: boolean;\n\n  /** The selected value of the control. */\n  @Prop({ reflect: true, mutable: true }) value: string = '';\n\n  /** Is one of these items required. */\n  @Prop() required: boolean;\n\n  @Event() scChange: EventEmitter<string>;\n\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  @Method()\n  async reportValidity() {\n    this.invalid = !this.input.checkValidity();\n    return this.input.reportValidity();\n  }\n\n  @Listen('scChange')\n  handleRadioClick(event) {\n    if (event.target.tagName !== 'SC-RADIO') return;\n    event.stopImmediatePropagation();\n    const target = event.target as HTMLScRadioElement;\n    if (target.disabled) {\n      return;\n    }\n    if (target.checked) {\n      this.value = target.value;\n      this.scChange.emit(target.value);\n    }\n  }\n\n  render() {\n    return (\n      <fieldset\n        part=\"base\"\n        class={{\n          'radio-group': true,\n          'radio-group--invalid': this.invalid,\n          'radio-group--is-required': this.required,\n          'radio-group--is-rtl': isRtl(),\n        }}\n        aria-invalid={this.invalid}\n        role=\"radiogroup\"\n      >\n        <legend part=\"label\" class=\"radio-group__label\">\n          <slot name=\"label\">{this.label}</slot>\n        </legend>\n\n        <input type=\"text\" class=\"radio-group__hidden-input\" ref={el => (this.input = el as HTMLInputElement)} required={this.required} value={this.value} tabindex=\"-1\" />\n        <div part=\"items\" class=\"radio-group__items\">\n          <slot></slot>\n        </div>\n      </fieldset>\n    );\n  }\n}\n",":host {\n  display: block;\n}\n\n.shipping-choice {\n  width: 100%;\n  padding: var(--sc-spacing-medium);\n  margin: 0;\n  box-sizing: border-box;\n  border-bottom: var(--sc-input-border, 1px solid var(--sc-color-gray-300));\n\n  &__empty {\n    background: var(--sc-alert-background-color, var(--sc-color-gray-100));\n    opacity: 0.75;\n    padding: var(--sc-spacing-large);\n    border-radius: var(--sc-input-border-radius-medium);\n    line-height: var(--sc-line-height-dense);\n    font-size: var(--sc-font-size-small);\n    border: solid 1px var(--sc-input-border-color, var(--sc-input-border));\n  }\n\n  &:last-child {\n    border-bottom-width: 0;\n  }\n\n  &__text {\n    display: flex;\n    flex-direction: column;\n    gap: var(--sc-spacing-xx-small);\n  }\n\n  &__price {\n    color: var(--sc-input-label-color);\n    font-weight: var(--sc-price-choice-price-font-weight, var(--sc-font-weight-normal));\n    white-space: nowrap;\n  }\n\n  &__name {\n    display: inline-block;\n    color: var(--sc-price-choice-name-color, var(--sc-input-label-color));\n    font-size: var(--sc-price-choice-name-size, var(--sc-input-label-font-size-medium));\n    font-weight: var(--sc-price-choice-name-font-weight, var(--sc-font-weight-bold));\n    text-transform: var(--sc-price-choice-text-transform, var(--sc-input-label-text-transform, none));\n    line-height: var(--sc-shipping-name-line-height, 1);\n  }\n\n  &__description {\n    color: var(--sc-input-label-color);\n    font-weight: var(--sc-price-choice-price-font-weight, var(--sc-font-weight-normal));\n    line-height: var(--sc-shipping-description-line-height, 1.2);\n  }\n}\n\nsc-radio-group::part(items) {\n  border: var(--sc-input-border, 1px solid var(--sc-color-gray-300));\n  border-radius: var(--sc-shipping-choice-border-radius, var(--sc-input-border-radius-medium));\n  box-shadow: var(--sc-shipping-box-shadow, var(--sc-input-box-shadow));\n  overflow: hidden;\n  position: relative;\n}\n\nsc-radio::part(base) {\n  width: 100%;\n}\n\nsc-radio::part(label) {\n  width: 100%;\n  display: flex;\n  justify-content: space-between;\n  gap: var(--sc-spacing-small);\n}\n\nsc-radio-group::slotted(sc-radio:not(:last-of-type)) {\n  margin-bottom: 0;\n}\n","import { Component, Prop, h, Host } from '@stencil/core';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { state as checkoutState } from '@store/checkout';\nimport { Checkout, ShippingMethod } from '../../../types';\nimport { lockCheckout, unLockCheckout } from '@store/checkout/mutations';\nimport { createOrUpdateCheckout } from '@services/session';\nimport { checkoutIsLocked } from '@store/checkout/getters';\nimport { createErrorNotice } from '@store/notices/mutations';\nimport { speak } from '@wordpress/a11y';\nimport { getFormattedPrice } from '../../../functions/price';\n\n/**\n * @part base - The elements base wrapper.\n * @part empty - The empty message.\n * @part block-ui - The block ui loader.\n * @part radio__base - The radio base wrapper.\n * @part radio__label - The radio label.\n * @part radio__control - The radio control wrapper.\n * @part radio__checked-icon - The radio checked icon.\n */\n@Component({\n  tag: 'sc-shipping-choices',\n  styleUrl: 'sc-shipping-choices.scss',\n  shadow: true,\n})\nexport class ScShippingChoices {\n  /** The shipping section label */\n  @Prop() label: string;\n\n  /** Whether to show the shipping choice description */\n  @Prop() showDescription: boolean = true;\n\n  /** Maybe update the order. */\n  async updateCheckout(selectedShippingChoiceId: string) {\n    if (!selectedShippingChoiceId) return;\n    try {\n      lockCheckout('selected_shipping_choice');\n      checkoutState.checkout = (await createOrUpdateCheckout({\n        id: checkoutState.checkout.id,\n        data: {\n          selected_shipping_choice_id: selectedShippingChoiceId,\n        },\n      })) as Checkout;\n\n      speak(__('Shipping choice updated.', 'surecart'), 'assertive');\n      const { total_amount, currency } = checkoutState.checkout;\n\n      /** translators: %1$s: formatted amount */\n      speak(sprintf(__('Your order total has changed to: %1$s.', 'surecart'), getFormattedPrice({ amount: total_amount, currency })), 'assertive');\n    } catch (e) {\n      console.error(e);\n      createErrorNotice(e);\n    } finally {\n      unLockCheckout('selected_shipping_choice');\n    }\n  }\n\n  render() {\n    // shipping choice is not rewquired.\n    if (!checkoutState?.checkout?.selected_shipping_choice_required) {\n      return <Host style={{ display: 'none' }}></Host>;\n    }\n\n    // no shipping choices yet.\n    if (!checkoutState?.checkout?.shipping_choices?.data?.length) {\n      return (\n        <sc-form-control part='empty' label={this.label || __('Shipping', 'surecart')}>\n          <div class=\"shipping-choice__empty\">{__('Sorry, we are not able to ship to your address.', 'surecart')}</div>\n        </sc-form-control>\n      );\n    }\n\n    return (\n      <Host>\n        <sc-radio-group part='base' label={this.label || __('Shipping', 'surecart')} class=\"shipping-choices\" onScChange={e => this.updateCheckout(e.detail)}>\n          {(checkoutState?.checkout?.shipping_choices?.data || []).map(({ id, amount, currency, shipping_method }) => (\n            <sc-radio key={id} checked={checkoutState?.checkout?.selected_shipping_choice === id} exportparts='base:radio__base,label:radio__label,control:radio__control,checked-icon:radio__checked-icon' class=\"shipping-choice\" value={id}>\n              <div class=\"shipping-choice__text\">\n                <div class=\"shipping-choice__name\">{(shipping_method as ShippingMethod)?.name || __('Standard Shipping', 'surecart')}</div>\n                {this.showDescription && !!(shipping_method as ShippingMethod)?.description && (\n                  <div class=\"shipping-choice__description\">{(shipping_method as ShippingMethod)?.description}</div>\n                )}\n              </div>\n              <div class=\"shipping-choice__price\">{!!amount ? <sc-format-number type=\"currency\" value={amount} currency={currency} /> : __('Free', 'surecart')}</div>\n            </sc-radio>\n          ))}\n        </sc-radio-group>\n        {checkoutIsLocked('selected_shipping_choice') && <sc-block-ui></sc-block-ui>}\n      </Host>\n    );\n  }\n}\n","/**\n * @prop --track-color: The color of the spinner's track.\n * @prop --indicator-color: The color of the spinner's indicator.\n * @prop --stroke-width: The width of the indicator.\n */\n:host {\n  --track-color: #0d131e20;\n  --indicator-color: var(--sc-color-primary-500);\n  --stroke-width: 2px;\n  --spinner-size: 1em;\n\n  display: inline-block;\n}\n\n.spinner {\n  display: inline-block;\n  width: var(--spinner-size);\n  height: var(--spinner-size);\n  border-radius: 50%;\n  border: solid var(--stroke-width) var(--track-color);\n  border-top-color: var(--indicator-color);\n  border-right-color: var(--indicator-color);\n  animation: 1s linear infinite spin;\n}\n\n@keyframes spin {\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n}\n","import { Component, h } from '@stencil/core';\n\n@Component({\n  tag: 'sc-spinner',\n  styleUrl: 'sc-spinner.scss',\n  shadow: true,\n})\nexport class ScSpinner {\n  render() {\n    return <span part=\"base\" class=\"spinner\" aria-busy=\"true\" aria-live=\"polite\"></span>;\n  }\n}\n",":host(:not(:focus-within)) {\n  position: absolute !important;\n  width: 1px !important;\n  height: 1px !important;\n  clip: rect(0 0 0 0) !important;\n  clip-path: inset(50%) !important;\n  border: none !important;\n  overflow: hidden !important;\n  white-space: nowrap !important;\n  padding: 0 !important;\n}\n","import { Component, h } from '@stencil/core';\n\n@Component({\n  tag: 'sc-visually-hidden',\n  styleUrl: 'sc-visually-hidden.css',\n  shadow: true,\n})\nexport class ScVisuallyHidden {\n  render() {\n    return <slot />;\n  }\n}\n"],"version":3}