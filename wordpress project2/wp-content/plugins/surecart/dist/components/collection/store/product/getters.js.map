{"version":3,"file":"getters.js","sourceRoot":"","sources":["../../../src/store/product/getters.ts"],"names":[],"mappings":";AAAA;;GAEG;AACH,OAAO,KAAK,MAAM,SAAS,CAAC;AAC5B,OAAO,EAAE,6BAA6B,EAAE,6BAA6B,EAAE,MAAM,cAAc,CAAC;AAC5F,OAAO,EAAE,oBAAoB,EAAE,MAAM,sBAAsB,CAAC;AAE5D;;;GAGG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,GAAG,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,IAAI,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,QAAQ,CAAA,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAA,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,QAAQ,KAAG,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,QAAQ,CAAA,CAAC,CAAC,CAAC,mBAAmB;AAE1J;;;;GAIG;AACH,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAC,CAAC,CAAC,CAAA,MAAA,KAAK,CAAC,OAAO,0CAAE,aAAa,KAAI,CAAC,CAAA,MAAA,KAAK,CAAC,OAAO,0CAAE,4BAA4B,CAAA,CAAC,CAAC;AAExH;;GAEG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,YAAoB,EAAE,MAAc,EAAE,EAAE,CAAC,6BAA6B,CAAC,YAAY,EAAE,MAAM,EAAE,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;AAEjK;;GAEG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,YAAoB,EAAE,MAAc,EAAE,EAAE,CAAC,6BAA6B,CAAC,YAAY,EAAE,MAAM,EAAE,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;AAEjK;;;;GAIG;AACH,MAAM,CAAC,MAAM,mBAAmB,GAAG,GAAG,EAAE;;EACtC,oEAAoE;EACpE,IAAI,CAAC,uBAAuB,EAAE;IAC5B,OAAO,KAAK,CAAC;GACd;EAED,0DAA0D;EAC1D,IAAI,CAAC,CAAA,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,eAAe,CAAA;IAAE,OAAO,CAAA,MAAA,KAAK,CAAC,OAAO,0CAAE,eAAe,KAAI,CAAC,CAAC;EAExE,0CAA0C;EAC1C,OAAO,CAAA,MAAA,KAAK,CAAC,eAAe,0CAAE,eAAe,KAAI,CAAC,CAAC;AACrD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAAG,GAAG,EAAE,eAAC,OAAA,CAAC,CAAC,CAAA,MAAA,KAAK,CAAC,QAAQ,0CAAE,MAAM,CAAA,IAAI,CAAA,MAAA,oBAAoB,CAAC,EAAE,QAAQ,EAAE,KAAK,CAAC,QAAQ,EAAE,MAAM,EAAE,KAAK,CAAC,aAAa,EAAE,CAAC,0CAAE,EAAE,MAAK,SAAS,CAAA,EAAA,CAAC","sourcesContent":["/**\n * Internal dependencies.\n */\nimport state from './store';\nimport { isProductVariantOptionMissing, isProductVariantOptionSoldOut } from '@store/utils';\nimport { getVariantFromValues } from '../../functions/util';\n\n/**\n * Available product prices\n * @returns {Price[]} - Returns an array of prices that are not archived\n */\nexport const availablePrices = () => (state.prices || []).filter(price => !price?.archived).sort((a, b) => a?.position - b?.position); // sort by position\n\n/**\n * Check if product label stock is enabled and not out of stock purchases are allowed.\n *\n * @returns {boolean} - Returns stock needs to be checked or not\n */\nexport const isStockNeedsToBeChecked = !!(state.product?.stock_enabled && !state.product?.allow_out_of_stock_purchases);\n\n/**\n * Check if this option is out of stock base on the selected variant.\n */\nexport const isOptionSoldOut = (optionNumber: number, option: string) => isProductVariantOptionSoldOut(optionNumber, option, state.variantValues, state.product);\n\n/**\n * Check if this option is out of stock base on the selected variant.\n */\nexport const isOptionMissing = (optionNumber: number, option: string) => isProductVariantOptionMissing(optionNumber, option, state.variantValues, state.product);\n\n/**\n * Is product out of stock.\n *\n * @returns {boolean} - Returns true if product is out of stock\n */\nexport const isProductOutOfStock = () => {\n  // If stock doesn't need to be checked, product is not out of stock.\n  if (!isStockNeedsToBeChecked) {\n    return false;\n  }\n\n  // If no variant is selected, check against product stock.\n  if (!state?.selectedVariant) return state.product?.available_stock <= 0;\n\n  // Check against selected variant's stock.\n  return state.selectedVariant?.available_stock <= 0;\n};\n\nexport const isSelectedVariantMissing = () => !!state.variants?.length && getVariantFromValues({ variants: state.variants, values: state.variantValues })?.id === undefined;\n"]}